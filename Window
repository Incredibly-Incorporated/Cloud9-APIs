--[[
# 'Window' API Documentation:

The Window API is designed to provide unique
and customizable windows. This API will give
windows scroll bar objects, button objects,
and other internal goodies in addition to returning
special event handlers for whatever you decide to use
when handling internal events.

Refer to function documentation for any general
inquiries. 
<>
]]

--[[ENVIRONMENT VARIABLES]]--
VERSION = "2.1.1"

--[[LOCAL VARIABLES ZONE:]]--
local functions = {}

--[[
# Function: 'display', Documentation:

This function is used to display the window.

> Parameters:
<Parameter> | TYPE         | Information:
------------+--------------+-------------
<window>    | TABLE OBJECT | The window object to display. 
<visible>   | BOOLEAN      | Whether the window is visible or not.
------------+--------------+-------------

> Returns:
@return: <nil>
<>
]]

functions.display = function(window, visible)
    -- # Checking Screen:
    if type(window) ~= "table" or not window.isWindow then error("['window'] was not defined!", 2) end

    -- # Declaring Screen Wrap:
    local content = window.content.content_screen:hook()
    local win_screen = window.win_screen:hook()

    -- # Code:
    -- > Make Window Screens Visible:
    window.visible = visible
    content.visible(visible)
    win_screen.visible(visible)

    -- > Draw Main Window Body:
    win_screen.setBackgroundColor(window.body.background)
    win_screen.clear()

    -- # Displaying Window Buttons:
    if window.can_move then
        window.buttons.titlebar:display()
    end
    if window.can_minimize then
        window.buttons.minimize:display()
    end
    if window.can_maximize then
        window.buttons.maximize:display()
    end
    if window.can_close then
        window.buttons.close:display()
    end
    if window.can_resize then
        window.buttons.resize:display()
    end

    -- # Update Button Refreshes:
    win_screen.refresh(true)

    -- $ Last Dev Here: Figure out why the screen doesn't refresh properly upon window move...

    -- # Draw Titlebar Information
    win_screen.setCursorPos(window.titlebar.text_xPos, window.titlebar.text_yPos)
    win_screen.setBackgroundColor(window.titlebar.background)
    win_screen.setTextColor(window.titlebar.foreground)
    win_screen.write(window.titlebar.name)
end

--[[
# Function: 'run', Documentation:

This function is used to run a function in the window.

> Parameters:
<Parameter>   | TYPE         | Information:
--------------+--------------+-------------
<window>      | TABLE OBJECT | The window object to display. 
<instruction> | FUNCTION     | The function to run in the window.
--------------+--------------+-------------

> Returns:
@return: <nil>
<>
]]

functions.run = function(window, instruction)
    -- # Checking Screen:
    if type(window) ~= "table" or not window.isWindow then error("['window'] was not defined!", 2) end

    -- # Checking if Screen is Visible:
    if not window.visible then 
        return
    end

    -- # Checking Variables:
    Debugger.check(instruction, "content", "function")

    -- # Code:
    instruction()
end

--[[
# Function: 'move', Documentation:

This function is used to move a window.

> Parameters:
<Parameter>   | TYPE         | Information:
--------------+--------------+-------------
<window>      | TABLE OBJECT | The window object to display. 
<e1>          | NUMBER       | Parameter 1, typically the event type.
<e3>          | NUMBER       | Parameter 3, the xPos of click, or let go.
<e4>          | NUMBER       | Parameter 4, the yPos of click, or let go.
<comparator>  | FUNCTION     | A comparator function if you need a special
              |              | condition met. Useful for border checking.
--------------+--------------+-------------

> Returns:
@return: <nil>

> Notes:
Ensure this function is called within an event manager.
<>
]]

functions.move = function(window, e1, e3, e4, comparator)
    -- # Checking Screen:
    if type(window) ~= "table" or not window.isWindow then error("['window'] was not defined!", 2) end

    -- # Checking if Screen is Visible:
    if not window.visible or not window.can_move then 
        return false
    end

    -- # Checking Variables:
    if comparator then
        Debugger.check(comparator, "comparator", "function")
    end

    if type(e3) ~= "number" or type(e4) ~= "number" then
        return false
    end

    local move_window, window_screen = window.move_window:hook(), window.win_screen:hook() 

    -- # Local Move Box & Function:
    move_window.visible(true)

    -- # Code:
    if comparator then
        if not comparator() then
            if e1 == "mouse_up" then
                -- $ Update Mouse Up Events Here...
            end
        end
    end
    if e1 == "mouse_click" and window.buttons.titlebar:check(e3, e4) and not window.titlebar.clicked then 
        -- # Update Variable Trackers in Window:
        window.titlebar.clicked = true
        window.clickedX, window.clickedY = e3, e4

        -- # Update Move Box Variables & Display Changes:
        window.move_box.startX = window.startX
        window.move_box.startY = window.startY
        window.move_box.endX = window.endX
        window.move_box.endY = window.endY
        window.display_move_box()
    elseif e1 == "mouse_drag" and window.titlebar.clicked then
        if e3 - window.clickedX + window.width <= window.move_window.endX and e3 - window.clickedX + 1 >= window.move_window.startX then
            window.move_box.startX = e3 - window.clickedX + 1
            window.move_box.endX = window.move_box.startX + window.width - 1
        end
        if e4 - window.clickedY + window.height <= window.move_window.endY and e4 - window.clickedY + 1 >= window.move_window.startY then
            window.move_box.startY = e4 - window.clickedY + 1
            window.move_box.endY = window.move_box.startY + window.height - 1
        end
        window.display_move_box()
    elseif e1 == "mouse_up" and window.titlebar.clicked then
        -- # Update Visibility Rules:
        move_window.visible(false)
        window.titlebar.clicked = false

        -- # Update Screen Positions:
        window_screen.resize(window.move_box.startX, window.move_box.startY, window.width, window.height, window.win_screen.level)
        window.startX = window.move_box.startX
        window.startY = window.move_box.startY
        window.endX = window.move_box.endX
        window.endY = window.move_box.endY
        window.update()

        -- # Update Main Window:
        window:display(true)
    end
end

--[[
# Function: 'debug', Documentation:

This function is used to debug a window.

> Parameters:
<Parameter> | TYPE           | Information:
------------+----------------+-------------
<window>    | TABLE OBJECT   | Your window object.
<file>      | STRING         | Directory path of your file.
------------+----------------+-------------

> Returns:
@return: <nil>

<>
]]

functions.debug = function(window, file)
    -- # Checking Environment:
    if type(window) ~= "table" or not window.isWindow then error("[window] was not defined!", 2) end

    -- # Declaring Local Variables:
    local ID = "Window <"..tostring(window)..">:"

    -- # Checking Local Variables:
    if not file and C9 then 
        file = C9.WINDOW_LOG 
    elseif file and not fs.exists(file) then
        error("['file'] does not exist!", 2)
    elseif not file then
        file = "window_debug"
    end
    if not fs.exists("window_debug") then
        local handle = fs.open(file, "w")
        handle.close()
    end

    -- # Code:
    Debugger.log(file, "w", window, ID, "screen", "content", "move_window", "buttons")
end

--[[END LOCAL FUNCTIONS ZONE]]--

--[[
# Function: 'new', Documentation:

This function is used to provide an object in
which the user can manage a window. 

> Parameter Table: {
["Index"]               | TYPE         | <REQ/OPT>  | Information:
------------------------+--------------+------------+-------------
["name"]                | STRING       | <REQUIRED> | The name of your window. Useful for taskbars.
["width"]               | NUMBER       | <OPTIONAL> | How wide your window is.
["height"]              | NUMBER       | <OPTIONAL> | How tall your window is.
["startX"]              | NUMBER       | <OPTIONAL> | What column to place the left corner of the window in.
["startY"]              | NUMBER       | <OPTIONAL> | What row to place the left corner of the window in.
["screen"]              | TABLE OBJECT | <REQUIRED> | The parent screen to have the window attached to.
["visible"]             | BOOLEAN      | <OPTIONAL> | Whether or not the window is visible on screen.
["titlebar_name"]       | STRING       | <OPTIONAL> | The text to display on the titlebar.
["titlebar_foreground"] | COLOR        | <OPTIONAL> | What color the titlebar text should be.
["titlebar_background"] | COLOR        | <OPTIONAL> | What color the titlebar background should be.
["titlebar_design"]     | STRING       | <OPTIONAL> | Pass 'unix' for unix style titlebar; otherwise, pass 'windows'.
["window_foreground"]   | COLOR        | <OPTIONAL> | What color text inside window should be.
["window_background"]   | COLOR        | <OPTIONAL> | What color the window background should be.
["can_move"]            | BOOLEAN      | <OPTIONAL> | Whether or not the window can be moved by the mouse.
["can_resize"]          | BOOLEAN      | <OPTIONAL> | Whether or not the window can be resized.
["can_minimize"]        | BOOLEAN      | <OPTIONAL> | Whether or not the window can change visibility.
["can_maximize"]        | BOOLEAN      | <OPTIONAL> | Whether or not the window can be maximized to screen width & height.
["can_close"]           | BOOLEAN      | <OPTIONAL> | Whether or not the window needs to block the closing event handler.
------------------------+--------------+------------+-------------
}

> Returns:
@return: <table>; [OOP]| <screen>; [OOP] 
@info  : Ensure you assign a variable to your window, and screen returned.

> Notes:
Ensure all these variables are passed into a table. 
Check documentation for optional variables.

<>
]]

function new(pars)
    -- # Checking Critical Variable:
    if not pars then
        error("<CRITICAL> Arguments must be passed inside a table!", 2)
    end

    -- # Checking Required Variables:
    Debugger.check(pars.name, "['name']", "string")
    Debugger.check(pars.screen, "['screen']", "table")

    if not pars.screen.isScreen then
        error("['screen'] is not a valid screen object!", 2)
    end

    -- # Declaring Optional Variables:
    local term = pars.screen.display
    local w, h = term.getSize()
    local hidden = nil
    local titlebar_foreground = nil
    local titlebar_background = nil
    local window_foreground = nil
    local window_background = nil

    if C9 then
        titlebar_foreground = C9.DEFAULT_TITLEBAR_FOREGROUND
        titlebar_background = C9.DEFAULT_TITLEBAR_BACKGROUND
        window_foreground = C9.DEFAULT_WINDOW_FOREGROUND
        window_background = C9.DEFAULT_WINDOW_BACKGROUND
    else
        titlebar_foreground = colors.white
        titlebar_background = colors.cyan
        window_foreground = colors.black
        window_background = colors.gray
    end

    -- > Updating Unavailable Pars Objects:
    pars.width               = pars.width or w
    pars.height              = pars.height or h
    pars.startX              = pars.startX or 1
    pars.startY              = pars.startY or 1
    pars.titlebar_name       = pars.titlebar_name or pars.name
    pars.titlebar_foreground = pars.titlebar_foreground or titlebar_foreground
    pars.titlebar_background = pars.titlebar_background or titlebar_background
    pars.titlebar_design     = pars.titlebar_design or "unix"
    pars.window_foreground   = pars.window_foreground or window_foreground
    pars.window_background   = pars.window_background or window_background

    -- # Checking Optional Variables:
    Debugger.check(pars.width, "['width']", "number")
    Debugger.check(pars.height, "['height']", "number")
    Debugger.check(pars.startX, "['startX']", "number")
    Debugger.check(pars.startY, "['startY']", "number")
    Debugger.check(pars.visible, "['visible']", "boolean")
    Debugger.check(pars.titlebar_name, "['titlebar_name']", "string")
    Debugger.check(pars.titlebar_foreground, "['titlebar_foreground']", "number")
    Debugger.check(pars.titlebar_background, "['titlebar_background']", "number")
    Debugger.check(pars.titlebar_design, "['titlebar_design']", "unix", "windows")
    Debugger.check(pars.window_foreground, "['window_foreground']", "number")
    Debugger.check(pars.window_background, "['window_background']", "number")
    Debugger.check(pars.can_move, "['can_move']", "boolean")
    Debugger.check(pars.can_resize, "['can_resize']", "boolean")
    Debugger.check(pars.can_minimize, "['can_minimize']", "boolean")
    Debugger.check(pars.can_maximize, "['can_maximize']", "boolean")
    Debugger.check(pars.can_close, "['can_close']", "boolean")

    -- # Updating Local Variables:
    if pars.visible then
        hidden = false
    else
        hidden = true
    end

    -- # Building Child Screen & Content Screen off of Parent:
    local child = pars.screen:add(
        pars.startX, 
        pars.startY, 
        pars.width, 
        pars.height, 
        pars.window_foreground, 
        pars.window_background, 
        pars.screen.level + 1,
        hidden
    )

    local content = pars.screen:add(
        pars.startX + 1,
        pars.startY + 1,
        pars.width - 2,
        pars.height - 2,
        colors.white,
        colors.black,
        pars.screen.level + 2,
        hidden
    )

    local move_window = pars.screen:add(
        1,
        1,
        w,
        h,
        pars.window_foreground,
        pars.window_background,
        pars.screen.level + 3,
        true,
        true
    )

    -- # Declaring Local Environment Table:
    local window = {
        ["name"] = pars.name,
        ["width"] = pars.width,
        ["height"] = pars.height,
        ["startX"] = pars.startX,
        ["startY"] = pars.startY,
        ["endX"] = pars.startX + pars.width - 1,
        ["endY"] = pars.startY + pars.height - 1,
        ["content"] = { 
            ["instruction"] = function() end,
            ["content_screen"] = content
        },
        ["win_screen"] = child,
        ["move_window"] = move_window,
        ["visible"] = pars.visible,
        ["titlebar"] = {
            ["name"] = pars.titlebar_name,
            ["foreground"] = pars.titlebar_foreground,
            ["background"] = pars.titlebar_background,
            ["design"] = pars.titlebar_design,
        },
        ["body"] = {
            ["foreground"] = pars.window_foreground,
            ["background"] = pars.window_background,
            ["resizer"] = {
                ["text"] = string.char(4),
                ["xPos"] = pars.width,
                ["yPos"] = pars.height
            }
        },
        ["buttons"] = {},
        ["move_box"] = {
            ["startX"] = pars.startX,
            ["startY"] = pars.startY,
            ["endX"] = pars.startX + pars.width - 1,
            ["endY"] = pars.startY + pars.height - 1
        },
        ["clickedX"] = 0,
        ["clickedY"] = 0,
        ["can_move"] = pars.can_move,
        ["can_resize"] = pars.can_resize,
        ["can_minimize"] = pars.can_minimize,
        ["can_maximize"] = pars.can_maximize,
        ["can_close"] = pars.can_close,
        ["isWindow"] = true
    }

    -- # Declaring Local Window Variables:
    if pars.titlebar_design == "unix" then
        -- # Center Text on Titlebar:
        window.titlebar.text_xPos = Text.center({
            ["length"] = window.titlebar.name,
            ["startX"] = 1,
            ["width"] = window.width
        })
        window.titlebar.text_yPos = 1

        -- # Building Window Objects:
        -- > Building Close Object:
        window.titlebar.close = {}
        window.titlebar.close.text = string.char(7)
        window.titlebar.close.xPos = 1
        window.titlebar.close.yPos = 1
        window.titlebar.close.foreground = colors.red
        window.titlebar.close.background = pars.titlebar_background

        -- > Building Minimize Object:
        window.titlebar.minimize = {}
        window.titlebar.minimize.text = string.char(7)
        window.titlebar.minimize.xPos = 3
        window.titlebar.minimize.yPos = 1
        window.titlebar.minimize.foreground = colors.yellow
        window.titlebar.minimize.background = pars.titlebar_background

        -- > Building Maximize Object:
        window.titlebar.maximize = {}
        window.titlebar.maximize.text = string.char(7)
        window.titlebar.maximize.xPos = 5
        window.titlebar.maximize.yPos = 1
        window.titlebar.maximize.foreground = colors.green
        window.titlebar.maximize.background = pars.titlebar_background
    else
        -- # Place Text @ Start of Titlebar:
        window.titlebar.text_xPos = 1
        window.titlebar.text_yPos = 1

        -- # Building Window Objects:
        -- > Building Close Object:
        window.titlebar.close = {}
        window.titlebar.close.text = " "..string.char(215).." "
        window.titlebar.close.xPos = pars.width - 2
        window.titlebar.close.yPos = 1
        window.titlebar.close.foreground = colors.white
        window.titlebar.close.background = colors.red

        -- > Building Minimize Object:
        window.titlebar.minimize = {}
        window.titlebar.minimize.text = " - "
        window.titlebar.minimize.xPos = pars.width - 8
        window.titlebar.minimize.yPos = 1
        window.titlebar.minimize.foreground = pars.titlebar_foreground
        window.titlebar.minimize.background = pars.titlebar_background

        -- > Building Maximize Object:
        window.titlebar.maximize = {}
        window.titlebar.maximize.text = " + "
        window.titlebar.maximize.xPos = pars.width - 5
        window.titlebar.maximize.yPos = 1
        window.titlebar.maximize.foreground = pars.titlebar_foreground
        window.titlebar.maximize.background = pars.titlebar_background
    end

    -- # Building Window Buttons:
    local bFlash = nil
    if pars.titlebar_background == colors.gray then
        bFlash = colors.lightGray
    else
        bFlash = colors.gray
    end

    if pars.can_move then
        window.buttons.titlebar = Button.new({
            ["xPos"] = 1,
            ["yPos"] = 1,
            ["background"] = window.titlebar.background,
            ["bFlash"] = bFlash,
            ["width"] = window.width,
            ["level"] = window.win_screen.level,
            ["screen"] = window.win_screen,
            ["overwrite"] = true 
        })
    end

    if pars.can_minimize then
        window.buttons.minimize = Button.new({
            ["text"] = window.titlebar.minimize.text,
            ["xPos"] = window.titlebar.minimize.xPos,
            ["yPos"] = window.titlebar.minimize.yPos,
            ["foreground"] = window.titlebar.minimize.foreground,
            ["background"] = window.titlebar.minimize.background,
            ["bFlash"] = bFlash,
            ["screen"] = window.win_screen
        })
    end

    if pars.can_maximize then
        window.buttons.maximize = Button.new({
            ["text"] = window.titlebar.maximize.text,
            ["xPos"] = window.titlebar.maximize.xPos,
            ["yPos"] = window.titlebar.maximize.yPos,
            ["foreground"] = window.titlebar.maximize.foreground,
            ["background"] = window.titlebar.maximize.background,
            ["bFlash"] = bFlash,
            ["screen"] = window.win_screen
        })
    end

    if pars.can_close then
        window.buttons.close = Button.new({
            ["text"] = window.titlebar.close.text,
            ["xPos"] = window.titlebar.close.xPos,
            ["yPos"] = window.titlebar.close.yPos,
            ["foreground"] = window.titlebar.close.foreground,
            ["background"] = window.titlebar.close.background,
            ["bFlash"] = bFlash,
            ["screen"] = window.win_screen
        })
    end

    if pars.can_resize then
        window.buttons.resizer = Button.new({
            ["text"] = window.body.resizer.text,
            ["xPos"] = window.body.resizer.xPos,
            ["yPos"] = window.body.resizer.yPos,
            ["foreground"] = window.body.foreground,
            ["background"] = window.body.background,
            ["tFlash"] = Craft.compliment(window.body.foreground),
            ["screen"] = window.win_screen
        })
    end

    -- # Window Local Functions:
    window.display_move_box = function()
        local move_window = window.move_window:hook() 

        move_window.clear(false, true)

        -- # Left Bar:
        for y = window.move_box.startY, window.move_box.endY do
            move_window.setCursorPos(window.move_box.startX, y)
            if window.move_window.parent.terminal[y][window.move_box.startX]["background"] == colors.black then
                move_window.setTextColor(colors.white)
            else
                move_window.setTextColor(colors.black)
            end
            move_window.setBackgroundColor(window.move_window.parent.terminal[y][window.move_box.startX]["background"])
            move_window.write(string.char(127), false, true)
        end

        -- # Right Bar:
        for y = window.move_box.startY, window.move_box.endY do
            move_window.setCursorPos(window.move_box.endX, y)
            if window.move_window.parent.terminal[y][window.move_box.endX]["background"] == colors.black then
                move_window.setTextColor(colors.white)
            else
                move_window.setTextColor(colors.black)
            end
            move_window.setBackgroundColor(window.move_window.parent.terminal[y][window.move_box.endX]["background"])
            move_window.write(string.char(127), false, true)
        end

        -- # Top Bar:
        for x = window.move_box.startX, window.move_box.endX do
            move_window.setCursorPos(x, window.move_box.startY)
            if window.move_window.parent.terminal[window.move_box.startY][x]["background"] == colors.black then
                move_window.setTextColor(colors.white)
            else
                move_window.setTextColor(colors.black)
            end
            move_window.setBackgroundColor(window.move_window.parent.terminal[window.move_box.startY][x]["background"])
            move_window.write(string.char(127), false, true)
        end

        -- # Bottom Bar:
        for x = window.move_box.startX, window.move_box.endX do
            move_window.setCursorPos(x, window.move_box.endY)
            if window.move_window.parent.terminal[window.move_box.endY][x]["background"] == colors.black then
                move_window.setTextColor(colors.white)
            else
                move_window.setTextColor(colors.black)
            end
            move_window.setBackgroundColor(window.move_window.parent.terminal[window.move_box.endY][x]["background"])
            move_window.write(string.char(127), false, true)
        end
    end

    window.update = function()
        -- # Update Buttons:
        window.buttons.titlebar:replace(window.startX, window.startY)
        
        if window.titlebar.design == "windows" then
            if window.can_minimize then
                window.buttons.minimize:replace(window.endX - 8, window.startY)
            end
            if window.can_maximize then
                window.buttons.maximize:replace(window.endX - 5, window.startY)
            end
            if window.can_close then
                window.buttons.close:replace(window.endX - 2, window.startY)
            end
        else
            if window.can_minimize then
                window.buttons.minimize:replace(window.startX + 3, window.startY)
            end
            if window.can_maximize then
                window.buttons.maximize:replace(window.startX + 5, window.startY)
            end
            if window.can_close then
                window.buttons.close:replace(window.startX, window.startY)
            end
        end
        
        if window.can_resize then
            window.buttons.resizer:replace(window.endX, window.endY)
        end

        -- # Update Window Screens:
        local content_hook = window.content.content_screen:hook()
        content_hook.resize(window.startX + 1, window.startY + 1, window.width - 2, window.height - 2, window.content.level)
    end

    -- # Code:
    for func, instruction in pairs(functions) do
        window[func] = instruction
    end

    -- # Return window to User:
    return window, window.content.content_screen
end

-- End of Document